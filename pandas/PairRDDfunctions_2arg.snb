{"metadata":{"name":"PairRDDfunctions_2arg","user_save_timestamp":"1970-01-01T05:30:00.000Z","auto_save_timestamp":"1970-01-01T05:30:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"558570B086E24D88B07C3F21F443FD83"},"cell_type":"code","source":"// @Author : Maniram Yadav\n\nprint(sc)","outputs":[{"name":"stdout","output_type":"stream","text":"org.apache.spark.SparkContext@6df24203"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":13,"time":"Took: 1 second 82 milliseconds, at 2018-1-16 15:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"D1EB9D1EF686449286357702B96CB884"},"cell_type":"code","source":"val rdd1 = sc.parallelize(Seq(\n                          (\"key1\",2),\n                          (\"key2\",1),\n                          (\"key3\",4),\n                          (\"key4\",7),\n                          (\"key5\",2)\n))\n\nval rdd2 = sc.parallelize(Seq(\n                          (\"key1\",3),\n                          (\"key2\",9),\n                          (\"key3\",10)\n  \n))","outputs":[{"name":"stdout","output_type":"stream","text":"rdd1: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[86] at parallelize at <console>:56\nrdd2: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[87] at parallelize at <console>:64\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":14,"time":"Took: 1 second 70 milliseconds, at 2018-1-16 15:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1912066130-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"95E78D4FE47245EA845D8239060A5230"},"cell_type":"code","source":"  //   RDD Join Function \n\nprintln(\"Join of RDD1 to RDD2 \")\nrdd1.join(rdd2) foreach println\nprintln(\"Join of RDD2 to RDD1 \")\nrdd2.join(rdd1) foreach println\nprintln(\"Left Outer Join of RDD1 to RDD2 \")\nrdd1.leftOuterJoin(rdd2) foreach println\nprintln(\"Right Outer Join of RDD1 to RDD2 \")\nrdd1.rightOuterJoin(rdd1) foreach println","outputs":[{"name":"stdout","output_type":"stream","text":"Join of RDD1 to RDD2 \n(key3,(4,10))\n(key2,(1,9))\n(key1,(2,3))\nJoin of RDD2 to RDD1 \n(key2,(9,1))\n(key3,(10,4))\n(key1,(3,2))\nLeft Outer Join of RDD1 to RDD2 \n(key5,(2,None))\n(key1,(2,Some(3)))\n(key2,(1,Some(9)))\n(key4,(7,None))\n(key3,(4,Some(10)))\nRight Outer Join of RDD1 to RDD2 \n(key3,(Some(4),4))\n(key5,(Some(2),2))\n(key1,(Some(2),2))\n(key4,(Some(7),7))\n(key2,(Some(1),1))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":12,"time":"Took: 1 second 840 milliseconds, at 2018-1-16 15:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F410D452074D4BF0ADD72D4FFE24B054"},"cell_type":"code","source":"//    RDD cogroup  method\n\nrdd1.cogroup(rdd2) foreach println","outputs":[{"name":"stdout","output_type":"stream","text":"(key5,(CompactBuffer(2),CompactBuffer()))\n(key1,(CompactBuffer(2),CompactBuffer(3)))\n(key4,(CompactBuffer(7),CompactBuffer()))\n(key3,(CompactBuffer(4),CompactBuffer(10)))\n(key2,(CompactBuffer(1),CompactBuffer(9)))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":17,"time":"Took: 1 second 282 milliseconds, at 2018-1-16 15:25"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"89F507148F774515BD790DB1462F16A8"},"cell_type":"code","source":"//  Adding Cogrouped Key values\nval rdd3 = rdd1.cogroup(rdd2)\n\nval rdd4 = rdd3.map{ x =>\n  {\n        var key = x._1\n        var values = x._2\n        \n        var sum1,sum2=0\n        //values.foreach(v=> sum += v(0))\n        //(key,sum)\n        values._1.map(x=>sum1=x)\n        values._2.map(x=>sum2=x)\n        (key,sum1+sum2)\n  }     \n} \nrdd4 foreach println","outputs":[{"name":"stdout","output_type":"stream","text":"(key4,7)\n(key2,10)\n(key5,2)\n(key1,5)\n(key3,14)\nrdd3: org.apache.spark.rdd.RDD[(String, (Iterable[Int], Iterable[Int]))] = MapPartitionsRDD[113] at cogroup at <console>:63\nrdd4: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[114] at map at <console>:65\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":33,"time":"Took: 1 second 239 milliseconds, at 2018-1-16 15:41"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"D03640C5FF0844DF9E6168581FCE8554"},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}